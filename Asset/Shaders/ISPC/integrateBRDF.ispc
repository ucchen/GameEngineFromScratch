//
//////////////////////////////
// This ISPC kernel is autogenerated by spirv-cross.
// Mon Dec  3 23:34:03 2018
//////////////////////////////
//

#include "spirvcross_stdlib.ispc"

//////////////////////////////
// Work Group
//////////////////////////////
static uniform int3 gl_WorkGroupSize = {1, 1, 1};


//////////////////////////////
// Resources
//////////////////////////////
struct Light
{
    float lightIntensity;
    int lightType;
    int lightCastShadow;
    int lightShadowMapIndex;
    int lightAngleAttenCurveType;
    int lightDistAttenCurveType;
    float2 lightSize;
    int4 lightGuid;
    float4 lightPosition;
    float4 lightColor;
    float4 lightDirection;
    float4 lightDistAttenCurveParams[2];
    float4 lightAngleAttenCurveParams[2];
    mat4 lightVP;
    float4 padding[2];
};



//////////////////////////////
// Shader Code
//////////////////////////////
static SPIRV_INLINE uniform float RadicalInverse_VdC(uniform int& bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 1431655765u) << 1u) | ((bits & 2863311530u) >> 1u);
    bits = ((bits & 858993459u) << 2u) | ((bits & 3435973836u) >> 2u);
    bits = ((bits & 252645135u) << 4u) | ((bits & 4042322160u) >> 4u);
    bits = ((bits & 16711935u) << 8u) | ((bits & 4278255360u) >> 8u);
    return float_cast(bits) * 2.3283064365386962890625e-10f;
}

static SPIRV_INLINE uniform float2 Hammersley(uniform int& i, uniform int& N)
{
    uniform int param = i;
    uniform float _162 = RadicalInverse_VdC(param);
    return float2(float_cast(i) / float_cast(N), _162);
}

static SPIRV_INLINE varying float3 ImportanceSampleGGX(uniform float2& Xi, uniform float3& N, varying float& roughness)
{
    varying float a = roughness * roughness;
    uniform float _174 = Xi.x;
    uniform float phi = 6.283185482025146484375f * _174;
    uniform float _178 = Xi.y;
    uniform float _185 = Xi.y;
    varying float cosTheta = sqrt((1.0f - _178) / (1.0f + (((a * a) - 1.0f) * _185)));
    varying float sinTheta = sqrt(1.0f - (cosTheta * cosTheta));
    varying float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    uniform float _211 = N.z;
    uniform float3 up = mix(float3(1.0f, 0.0f, 0.0f), float3(0.0f, 0.0f, 1.0f), bool3(abs(_211) < 0.999000012874603271484375f));
    varying float3 tangent = normalize(cross(up, N));
    varying float3 bitangent = cross(N, tangent);
    varying float _233 = H.x;
    varying float _237 = H.y;
    varying float _242 = H.z;
    varying float3 sampleVec = ((tangent * _233) + (bitangent * _237)) + (N * _242);
    return normalize(sampleVec);
}

static SPIRV_INLINE varying float GeometrySchlickGGXIndirect(varying float& NdotV, varying float& roughness)
{
    varying float a = roughness;
    varying float k = (a * a) / 2.0f;
    varying float nom = NdotV;
    varying float denom = (NdotV * (1.0f - k)) + k;
    return nom / denom;
}

static SPIRV_INLINE varying float GeometrySmithIndirect(uniform float3& N, varying float3& V, varying float3& L, varying float& roughness)
{
    varying float NdotV = max(dot(N, V), 0.0f);
    varying float NdotL = max(dot(N, L), 0.0f);
    varying float param = NdotV;
    varying float param_1 = roughness;
    varying float ggx2 = GeometrySchlickGGXIndirect(param, param_1);
    varying float param_2 = NdotL;
    varying float param_3 = roughness;
    varying float ggx1 = GeometrySchlickGGXIndirect(param_2, param_3);
    return ggx1 * ggx2;
}

static SPIRV_INLINE varying float2 IntegrateBRDF(varying float& NdotV, varying float& roughness)
{
    varying float3 V;
    V.x = sqrt(1.0f - (NdotV * NdotV));
    V.y = 0.0f;
    V.z = NdotV;
    varying float A = 0.0f;
    varying float B = 0.0f;
    uniform float3 N = float3(0.0f, 0.0f, 1.0f);
    for (uniform int i = 0u; i < 1024u; i += (int)(1))
    {
        uniform int param = i;
        uniform int param_1 = 1024u;
        uniform float2 Xi = Hammersley(param, param_1);
        uniform float2 param_2 = Xi;
        uniform float3 param_3 = N;
        varying float param_4 = roughness;
        varying float3 H = ImportanceSampleGGX(param_2, param_3, param_4);
        varying float3 L = normalize((H * (2.0f * dot(V, H))) - V);
        varying float _296 = L.z;
        varying float NdotL = max(_296, 0.0f);
        varying float _300 = H.z;
        varying float NdotH = max(_300, 0.0f);
        varying float VdotH = max(dot(V, H), 0.0f);
        if (NdotL > 0.0f)
        {
            uniform float3 param_5 = N;
            varying float3 param_6 = V;
            varying float3 param_7 = L;
            varying float param_8 = roughness;
            varying float G = GeometrySmithIndirect(param_5, param_6, param_7, param_8);
            varying float G_Vis = (G * VdotH) / (NdotH * NdotV);
            varying float Fc = pow(1.0f - VdotH, 5.0f);
            A += ((1.0f - Fc) * G_Vis);
            B += (Fc * G_Vis);
        }
    }
    A /= 1024.0f;
    B /= 1024.0f;
    return float2(A, B);
}

static SPIRV_INLINE void _integrateBRDF_comp_main(varying int3& DTid, uniform image2D& img_output)
{
    varying int2 pixel_coords = int2(int2(DTid.x, DTid.y));
    varying int _371 = pixel_coords.x;
    varying int _377 = pixel_coords.y;
    varying float param = float_cast(_371 + 1) / 512.0f;
    varying float param_1 = float_cast(_377 + 1) / 512.0f;
    varying float2 _383 = IntegrateBRDF(param, param_1);
    varying float4 pixel;
    pixel = float4(_383.x, _383.y, pixel.z, pixel.w);
    varying float2 storeTemp = float2(pixel.x, pixel.y);
    imageStore(img_output, pixel_coords, storeTemp.xyyy);
}

static SPIRV_INLINE void integrateBRDF_ispc_main(uniform image2D &img_output, varying int3 gl_GlobalInvocationID)
{
    varying int3 DTid = gl_GlobalInvocationID;
    varying int3 param = DTid;
    _integrateBRDF_comp_main(param, img_output);
}


//////////////////////////////
// ISPC Entry Points
//////////////////////////////
export void integrateBRDF_dispatch_all(uniform int work_groups[3], uniform image2D &img_output)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    
    // Loop over the work group dimensions
    for(uniform int z = 0; z < gl_NumWorkGroups.z; z++)
    {
        for(uniform int y = 0; y < gl_NumWorkGroups.y; y++)
        {
            for(uniform int x = 0; x < gl_NumWorkGroups.x; x++)
            {
                uniform int3 gl_WorkGroupID = int3(x, y, z);
                
                // Vectorise the workgroup
                foreach(lx = 0 ... gl_WorkGroupSize.x)
                {
                    varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
                    varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
                    varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
                    
                    integrateBRDF_ispc_main( img_output, gl_GlobalInvocationID);
                }
            }
        }
    }
}

export void integrateBRDF_dispatch_single(uniform int work_group_ID[3], uniform int work_groups[3], uniform image2D &img_output)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    uniform int3 gl_WorkGroupID = int3(work_group_ID[0], work_group_ID[1], work_group_ID[2]);
    
    // Vectorise the workgroup
    foreach(lx = 0 ... gl_WorkGroupSize.x)
    {
        varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
        varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
        varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
        
        integrateBRDF_ispc_main( img_output, gl_GlobalInvocationID);
    }
}

export void integrateBRDF_dispatch_all_tiled(uniform int work_groups[3], uniform image2D &img_output)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    
    // Loop over the work group dimensions
    for(uniform int z = 0; z < gl_NumWorkGroups.z; z++)
    {
        for(uniform int y = 0; y < gl_NumWorkGroups.y; y++)
        {
            for(uniform int x = 0; x < gl_NumWorkGroups.x; x++)
            {
                uniform int3 gl_WorkGroupID = int3(x, y, z);
                
                // Vectorise the workgroup
                foreach_tiled(lx = 0 ... gl_WorkGroupSize.x)
                {
                    varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
                    varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
                    varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
                    
                    integrateBRDF_ispc_main( img_output, gl_GlobalInvocationID);
                }
            }
        }
    }
}

export void integrateBRDF_dispatch_single_tiled(uniform int work_group_ID[3], uniform int work_groups[3], uniform image2D &img_output)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    uniform int3 gl_WorkGroupID = int3(work_group_ID[0], work_group_ID[1], work_group_ID[2]);
    
    // Vectorise the workgroup
    foreach_tiled(lx = 0 ... gl_WorkGroupSize.x)
    {
        varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
        varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
        varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
        
        integrateBRDF_ispc_main( img_output, gl_GlobalInvocationID);
    }
}


export void integrateBRDF_get_workgroup_size(uniform int & wg_x, uniform int & wg_y, uniform int & wg_z)
{
    wg_x = gl_WorkGroupSize.x;
    wg_y = gl_WorkGroupSize.y;
    wg_z = gl_WorkGroupSize.z;
}

