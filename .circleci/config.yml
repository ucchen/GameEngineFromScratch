version: 2
jobs:
  build_linux:
    docker:
      - image: ubuntu:16.04
    steps:
      - run: 
          name: Install Dependencies
          command: |
             apt update 
             apt install -y curl clang cmake git uuid-dev libx11-dev libx11-xcb-dev libgl1-mesa-dev libnss3-dev libxss-dev libatk1.0-dev libatk-bridge2.0-dev libglib2.0-dev libpango1.0-dev libxi-dev libfontconfig1-dev libnspr4-dev libxcomposite-dev libxcursor-dev libxrender-dev libxtst-dev libxrandr-dev libgio2.0-cil-dev libdbus-1-dev libasound2-dev 
             curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
             apt install -y git-lfs
      - restore_cache:
          keys:
            - source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ arch }}-{{ .Branch }}-
            - source-{{ arch }}
      - checkout
      - run: 
          name: Git LFS Checkout
          command: |
             git lfs fetch
             git checkout
      - save_cache:
          key: source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - run:
          name: Build
          command: |
             ./build_crossguid.sh
             ./build_opengex.sh
             ./build_bullet.sh
             ./build_cef.sh
             ./build_sdl.sh
             ./build.sh
      - run:
          name: Test
          command: |
             cmake --build ./build --target test
  build_macos:
    macos:
      xcode: "10.0.0"
    steps:
      - restore_cache:
          keys:
            - source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ arch }}-{{ .Branch }}-
            - source-{{ arch }}
      - checkout
      - run: 
          name: Git LFS Checkout
          command: |
             git lfs fetch
             git checkout
      - save_cache:
          key: source-{{ arch }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - run: 
          name: Install Dependencies via MacPorts
          command: |
             curl -L -o $(pwd)/MacPorts-2.5.3-10.13-HighSierra.pkg https://github.com/macports/macports-base/releases/download/v2.5.3/MacPorts-2.5.3-10.13-HighSierra.pkg
             sudo installer -package $(pwd)/MacPorts-2.5.3-10.13-HighSierra.pkg -target /
             rm $(pwd)/MacPorts-2.5.3-10.13-HighSierra.pkg
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             sudo -E port -q install cmake
      - run:
          name: Build
          command: |
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             ./build_crossguid.sh
             ./build_opengex.sh
             ./build_zlib.sh
             ./build_bullet.sh
             ./build_cef.sh
             ./build_sdl.sh
             ./build.sh
      - run:
          name: Test
          command: |
             export PATH=/opt/local/bin:/opt/local/sbin:$PATH 
             cmake --build ./build --target test
  build_android:
    working_directory: ~/project
    docker:
      - image: tim03/android-sdk-ndk
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - run:
          name: Install Git LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt install -y git-lfs
      - restore_cache:
          keys:
            - source-android-{{ .Branch }}-{{ .Revision }}
            - source-android-{{ .Branch }}-
            - source-android
      - checkout
      - run: 
          name: Git LFS Checkout
          command: |
             git lfs fetch
             git checkout
      - save_cache:
          key: source-android-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          key: jars-{{ checksum "Game/Billiard/build.gradle" }}-{{ checksum  "Game/Billiard/app/build.gradle" }}
      - run:
          name: Setup Emulator
          command: |
                   sdkmanager "system-images;android-24;default;armeabi-v7a"
                   echo "no" | avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
          working_directory: Game/Billiard
      - run:
          name: Download Dependencies
          command: |
                   ./gradlew androidDependencies
          working_directory: Game/Billiard
      - save_cache:
          paths:
            - Game/Billiard/.gradle
          key: jars-{{ checksum "Game/Billiard/build.gradle" }}-{{ checksum  "Game/Billiard/app/build.gradle" }}
      - run:
          name: Build External Dependencies
          command: |
                   ./build_crossguid-android.sh
                   ./build_opengex-android.sh
                   ./build_bullet-android.sh
      - run:
          name: Build
          command: |
                   ./gradlew build
          working_directory: Game/Billiard
      - run:
          name: Launch Emulator 
          command: |
                   emulator @test -no-audio -no-window -no-boot-anim -accel on
          background: true
          working_directory: Game/Billiard
      - run:
          name: Deploy Assets
          command: |
                   adb wait-for-device
                   adb push ../../Asset/Scene/Example.ogex /data/local/tmp/Scene/Example.ogex
                   adb push ../../Asset/Scene/splash.ogex /data/local/tmp/Scene/splash.ogex
                   adb push ../../Asset/Textures/huff_simple0.jpg /data/local/tmp/Textures/huff_simple0.jpg
                   adb push ../../Asset/Textures/eye.png /data/local/tmp/Textures/eye.png
                   adb push ../../Asset/Textures/interior_lod0.tga /data/local/tmp/Textures/interior_lod0.tga
          working_directory: Game/Billiard
      - run:
          name: Run Geom Math Library Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/GeomMathTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/GeomMathTest
                   adb shell "cd /data/local/tmp && ./GeomMathTest"
          working_directory: Game/Billiard
      - run:
          name: Run Color Space Conversion Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/ColorSpaceConversionTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/ColorSpaceConversionTest
                   adb shell "cd /data/local/tmp && ./ColorSpaceConversionTest"
          working_directory: Game/Billiard
      - run:
          name: Run Asset Loader Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/AssetLoaderTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/AssetLoaderTest
                   adb shell "cd /data/local/tmp && ./AssetLoaderTest"
          working_directory: Game/Billiard
      - run:
          name: Run JPEG decoder Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/JpegParserTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/JpegParserTest
                   adb shell "cd /data/local/tmp && ./JpegParserTest"
          working_directory: Game/Billiard
      - run:
          name: Run PNG decoder Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/PngParserTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/PngParserTest
                   adb shell "cd /data/local/tmp && ./PngParserTest"
          working_directory: Game/Billiard
      - run:
          name: Run OGEX parser Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/OgexParserTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/OgexParserTest
                   adb shell "cd /data/local/tmp && ./OgexParserTest"
          working_directory: Game/Billiard
      - run:
          name: Run Scene Loading Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/SceneLoadingTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/SceneLoadingTest
                   adb shell "cd /data/local/tmp && ./SceneLoadingTest"
          working_directory: Game/Billiard
      - run:
          name: Run Bullet Test
          command: |
                   adb push app/build/intermediates/cmake/debug/obj/armeabi-v7a/BulletTest /data/local/tmp/
                   adb shell chmod +x /data/local/tmp/BulletTest
                   adb shell "cd /data/local/tmp && ./BulletTest"
          working_directory: Game/Billiard
      - store_artifacts:
          path: Game/Billiard/app/build/reports
          destination: reports
      - store_artifacts:
          path: Game/Billiard/app/build/test-results
          destination: test-results
      - store_artifacts:
          path: Game/Billiard/app/build/outputs/apk
          destination: apk
workflows:
  version: 2
  build_and_test:
    jobs:
      - build_linux
      - build_macos
      #- build_android

